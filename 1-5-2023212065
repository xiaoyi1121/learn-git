Git 与 GitHub 学习笔记
一、Git 基础
（一）概念
Git 是一种分布式版本控制系统，它能记录文件的变更历史，非常适合团队协作开发和个人项目管理。开发者可以在本地仓库进行各种操作，比如提交代码、管理分支等，之后再与远程仓库进行同步。
（二）安装与配置
安装：前往 Git 官方网站，根据自己的操作系统下载对应的安装包，然后按照提示完成安装。
配置用户名和邮箱：打开终端，输入以下命令：
git config --global user.name "你的用户名"
git config --global user.email "你的邮箱"

这一步是为了在提交代码时，能够明确标记身份，方便后续追溯代码的修改者。
二、基本操作
（一）初始化仓库
在项目的根目录下，执行以下命令：
git init

该命令会将当前目录初始化为一个 Git 仓库，同时生成一个隐藏的.git 文件夹，这个文件夹用于存储所有的版本控制信息。
（二）文件状态与操作
工作区、暂存区、本地仓库
工作区：是我们实际编辑文件的地方。
暂存区：是一个临时区域，用于存放准备提交到本地仓库的文件修改。
本地仓库：存储了所有的版本历史。
添加文件到暂存区：
添加单个文件：
git add 文件名

添加当前目录下所有文件：
git add.

这两个命令用于将文件从工作区添加到暂存区，以便后续提交到本地仓库。
3. 提交文件到本地仓库：
git commit -m "提交说明"

-m参数用于添加提交注释，注释内容应简洁明了地描述本次代码修改的内容，方便后续查看和追溯。
（三）查看状态与日志
查看状态：
git status

该命令可以查看当前工作区和暂存区的文件状态，包括哪些文件已修改、哪些文件未被跟踪等，帮助我们了解当前仓库的情况。
2. 查看日志：
git log

执行该命令会显示提交历史，包括提交者、提交时间、提交说明等详细信息，方便我们回顾代码的变更历史。
三、分支管理
（一）分支概念
分支是 Git 的一个重要特性，它允许开发者在不影响主分支的情况下，进行独立的开发和实验。通常主分支命名为 master 或 main，其他分支可以基于主分支创建。
（二）分支操作
创建分支：
git branch 分支名

该命令会在当前分支的基础上创建一个新的分支。
2. 切换分支：
git checkout 分支名

执行该命令后，会切换到指定的分支，此时工作区的文件状态会切换到该分支的状态。
3. 合并分支：
git merge 要合并的分支名

先切换到目标分支（例如 master），然后执行上述命令，将指定分支合并到当前分支。如果合并过程中出现冲突，需要手动解决冲突后再继续提交。
四、GitHub 介绍
（一）概念
GitHub 是一个基于 Web 的 Git 仓库托管平台，它提供了图形化界面和一系列强大的协作功能，极大地方便了开发者之间分享、管理和协作开发项目。
（二）使用流程
创建仓库：登录 GitHub，点击 “New repository”，在弹出的页面中填写仓库名称、描述等信息，然后点击 “Create repository” 完成创建。
关联本地与远程仓库：在本地仓库的目录下，执行以下命令：
git remote add origin 远程仓库URL

该命令将本地仓库与 GitHub 上的远程仓库进行关联，其中 “origin” 是远程仓库的默认别名，“远程仓库 URL” 是你在 GitHub 上创建的仓库的 URL 地址。
3. 推送与拉取
推送：
git push -u origin 分支名

该命令将本地指定分支的代码推送到远程仓库，-u参数用于将本地分支和远程分支进行关联，以后可以直接使用git push进行推送。
拉取：
git pull origin 分支名

执行该命令会从远程仓库获取指定分支的最新代码，并将其合并到本地当前分支。
五、协作开发
（一）Fork 与 Pull Request
Fork：在 GitHub 上，当你想参与他人的项目时，点击项目页面的 “Fork” 按钮，将项目复制到自己的 GitHub 空间，这样你就可以在自己的副本上进行修改和开发。
Pull Request：在自己 Fork 的仓库中修改代码后，点击 “New pull request”，向原项目所有者提交合并请求。原项目所有者会对你的代码进行审核，审核通过后，你的代码就会被合并到原项目中。
（二）团队协作注意事项
定期执行git pull命令，拉取最新代码，保持本地与远程仓库同步，避免因代码不同步而产生冲突。
合理规划和使用分支，例如创建开发分支用于新功能开发，测试分支用于代码测试，这样可以使开发流程更加清晰，分工更加明确。
提交代码时，务必写清楚提交说明，详细描述本次代码修改的内容和目的，方便团队成员理解和追溯。

